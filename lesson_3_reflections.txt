When would you want to use a remote repository rather than keeping all your work local?

Maybe when you want to collaborate, or share your work, with others. The remote repository might even be used as a kind of backup for your local files and commit history.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

It might be that changes made in the remote repository are made by another person, a collaborator, and that perhaps you don't want those changes in your local files without you checking them out and approve.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

Forks are used when cloning files or repositorys on GitHub, between users for example. Clones are made when copying files or repositorys from GitHub to your local repository. You can clone forks in this manner also, to your computer.

What is the benefit of having a copy of the last known state of the remote stored locally?

So that git (and you) know the relationship between the state of the remote repository and the state of the local one. Are they in-sync, are there changes, commits, made in the remote that hasn't been made locally, or vice versa. This is important so that git knows potential differences between versions, what can and can't be done, if there are conflicts that needs to be resolved before merging for example. It can also be good to have a copy of the latest remote state if you need to work off-line.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

I would do it in person, or via phone or skype or something similar. This would maybe make it easier to discuss changes directly, but of course requires that all collaborators can work at the same exakt time. And it might be more difficult to keep track of what changes are made, by whom and so on. And the more collaborators there are, the harder it would be. So I think using Git and Github makes it easier in many ways. If the ones you need to collaborate with also knows how to use these tools of course.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

Maybe when I wan't to try a new experimental feature or something like that, and be able to work on that in severel commits to see how it pans out, without being forced to incorporate the changes into the master branch just yet. Or when collaborating with others it makes sense to have different branches that can be worked on simultaneously, branches that you later on can merge in to the master branch. The benefit with only working on the master branch is that it is easier to keep it up to date with GitHub. Only working on the master branch though makes it complicated during collaborations due to the many conflicts that occur when different changes simultaneously are made on the same commits.